#!/usr/bin/env bash
# slurm-web-full-install-and-setup.sh
# Ubuntu 24.04 LTS: Install slurm-web (agent+gateway) and perform full initial setup.
# Usage:
#   sudo ./slurm-web-full-install-and-setup.sh <cluster-name>
# Example:
#   sudo ./slurm-web-full-install-and-setup.sh mini
#
# Notes:
# - Pass env vars to override defaults, e.g.:
#   GATEWAY_INTERFACE=0.0.0.0 SLURMRESTD_URI=http://slurm-ctl:6820 sudo ./slurm-web-full-install-and-setup.sh mycluster

set -euo pipefail

# ===== Tunables (override via env or CLI arg) =====
CLUSTER_NAME="${CLUSTER_NAME:-mini}"
if [[ $# -ge 1 ]]; then
  CLUSTER_NAME="$1"
fi

AGENT_INTERFACE="${AGENT_INTERFACE:-localhost}"      # Where agent listens (default loopback)
AGENT_PORT="${AGENT_PORT:-5012}"                     # Agent TCP port
GATEWAY_INTERFACE="${GATEWAY_INTERFACE:-localhost}"  # Where gateway binds (default loopback)
GATEWAY_PORT="${GATEWAY_PORT:-5011}"                 # Gateway TCP port
SLURMRESTD_URI="${SLURMRESTD_URI:-http://127.0.0.1:6820}" # Or http://host:port
SLURM_JWT_SRC="${SLURM_JWT_SRC:-/etc/slurm/jwt_hs256.key}"           # Slurm's JWT signing key
SLURMWEB_JWT_DST="${SLURMWEB_JWT_DST:-/var/lib/slurm-web/slurmrestd.key}"  # Where agent expects Slurm key

require_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "[!] Please run as root: sudo $0 <cluster-name>"
    exit 1
  fi
}

check_ubuntu_2404() {
  . /etc/os-release
  if [[ "${ID:-}" != "ubuntu" || "${VERSION_ID:-}" != "24.04" ]]; then
    echo "[!] This script targets Ubuntu 24.04 LTS (Noble). You're on: ${PRETTY_NAME:-unknown}."
    echo "    Proceeding anyway…"
  fi
}

install_repo_and_packages() {
  echo "[*] Installing prerequisites…"
  apt-get update -y
  apt-get install -y curl gpg ca-certificates lsb-release

  echo "[*] Adding Rackslab APT key & source…"
  curl -sS https://pkgs.rackslab.io/keyring.asc | gpg --dearmor | tee /usr/share/keyrings/rackslab.gpg >/dev/null

  cat >/etc/apt/sources.list.d/rackslab.sources <<'EOF'
Types: deb
URIs: https://pkgs.rackslab.io/deb
Suites: ubuntu24.04
Components: main slurmweb-5
Architectures: amd64
Signed-By: /usr/share/keyrings/rackslab.gpg
EOF

  echo "[*] apt update & install slurm-web packages…"
  apt-get update -y
  apt-get install -y slurm-web-agent slurm-web-gateway
}

write_configs() {
  echo "[*] Writing /etc/slurm-web/*.ini …"
  install -d -m 0755 /etc/slurm-web

  # Agent config
  cat >/etc/slurm-web/agent.ini <<EOF
[service]
cluster=${CLUSTER_NAME}
interface=${AGENT_INTERFACE}
port=${AGENT_PORT}

[slurmrestd]
# Default is unix socket; override via SLURMRESTD_URI env if using TCP
uri=${SLURMRESTD_URI}
auth=jwt
# auto mode uses jwt_key (below) and rotates tokens automatically
jwt_mode=auto
# Path where we'll copy Slurm's jwt_hs256.key for agent use:
jwt_key=${SLURMWEB_JWT_DST}

[jwt]
# Internal JWT for slurm-web components (generated by slurm-web-gen-jwt-key)
key=/var/lib/slurm-web/jwt.key
EOF

  # Gateway config (points to agent)
  cat >/etc/slurm-web/gateway.ini <<EOF
[service]
interface=${GATEWAY_INTERFACE}
port=${GATEWAY_PORT}

[ui]
# External URL to show in links; adjust if binding to 0.0.0.0 or hostname
host=http://${GATEWAY_INTERFACE}:${GATEWAY_PORT}

[agents]
url=http://${AGENT_INTERFACE}:${AGENT_PORT}
EOF
}

generate_slurmweb_jwt() {
  echo "[*] Generating Slurm-web internal JWT key…"
  /usr/libexec/slurm-web/slurm-web-gen-jwt-key
}

install_slurm_jwt_for_agent() {
  echo "[*] Installing Slurm JWT key for agent->slurmrestd auth…"
  if [[ ! -f "${SLURM_JWT_SRC}" ]]; then
    echo "[!] Slurm JWT key not found at ${SLURM_JWT_SRC}"
    echo "    Create it on the Slurm controller (once) and restart slurmctld/slurmdbd, e.g.:"
    echo "      dd if=/dev/random of=/var/spool/slurm/jwt_hs256.key bs=32 count=1"
    echo "      chown slurm:slurm /var/spool/slurm/jwt_hs256.key && chmod 0600 /var/spool/slurm/jwt_hs256.key"
    echo "    Skipping copy step for now."
  else
    install -d -m 0750 -o slurm-web -g slurm-web /var/lib/slurm-web
    cp -f "${SLURM_JWT_SRC}" "${SLURMWEB_JWT_DST}"
    chown slurm-web:slurm-web "${SLURMWEB_JWT_DST}"
    chmod 400 "${SLURMWEB_JWT_DST}"
  fi
}

connectivity_check() {
  echo "[*] (Optional) Checking connectivity to slurmrestd using agent config…"
  if /usr/libexec/slurm-web/slurm-web-connect-check; then
    echo "[✓] Connectivity check succeeded."
  else
    echo "[!] Connectivity check failed. Revisit /etc/slurm-web/agent.ini [slurmrestd] settings."
  fi
}

enable_services() {
  echo "[*] Enabling & starting services…"
  systemctl enable --now slurm-web-agent.service
  systemctl enable --now slurm-web-gateway.service
}

main() {
  require_root
  check_ubuntu_2404
  echo "[*] Using cluster name: ${CLUSTER_NAME}"
  install_repo_and_packages
  write_configs
  generate_slurmweb_jwt
  install_slurm_jwt_for_agent
  connectivity_check
  enable_services

  echo
  echo "[✓] Slurm-web install + initial setup complete."
  echo "    Gateway: http://${GATEWAY_INTERFACE}:${GATEWAY_PORT} (default binds to localhost)"
  echo "    Agent:   http://${AGENT_INTERFACE}:${AGENT_PORT} (default binds to localhost)"
  echo
  echo "Tips:"
  echo " - To expose gateway externally, set GATEWAY_INTERFACE=0.0.0.0 and adjust [ui].host."
  echo " - Ensure slurmrestd is running (JWT mode). If using unix socket default:"
  echo "     systemctl status slurmrestd"
  echo " - If using TCP slurmrestd, set SLURMRESTD_URI=http://host:port before running this script."
}

main "$@"

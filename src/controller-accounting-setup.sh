#!/usr/bin/env bash
set -euo pipefail

# =========================
# Tunables (override via env)
# =========================
CLUSTER_NAME="${CLUSTER_NAME:-mini}"

# MariaDB (server for slurmdbd)
DB_HOST="${DB_HOST:-127.0.0.1}"
DB_PORT="${DB_PORT:-3306}"
DB_NAME="${DB_NAME:-slurm_acct_db}"

# DB service user used by slurmdbd to talk to MariaDB
DB_USER="${DB_USER:-slurm}"
DB_PASS="${DB_PASS:-change_me}"

# slurmdbd service bind
SLURMDBD_HOST="${SLURMDBD_HOST:-$(hostname -f || hostname -s)}"
SLURMDBD_PORT="${SLURMDBD_PORT:-6819}"

# Paths
SLURM_ETC="${SLURM_ETC:-/etc/slurm}"
SLURMDBD_CONF="${SLURMDBD_CONF:-$SLURM_ETC/slurmdbd.conf}"
SLURM_CONF="${SLURM_CONF:-$SLURM_ETC/slurm.conf}"

# UFW (harmless if ufw absent)
OPEN_PORTS="${OPEN_PORTS:-1}"

# Whether to patch slurm.conf to use slurmdbd
PATCH_SLURM_CONF="${PATCH_SLURM_CONF:-1}"

# =========================
# Helpers
# =========================
log() { echo "[*] $*"; }
warn() { echo "[!] $*"; }
die() { echo "[x] $*" >&2; exit 1; }

need_root() {
  if [[ $EUID -ne 0 ]]; then
    die "Run as root or with sudo."
  fi
}

pkg_install() {
  if command -v apt >/dev/null 2>&1; then
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y mariadb-server mariadb-client slurmdbd slurm-client
  else
    die "This script currently targets Debian/Ubuntu (apt). Port as needed for your distro."
  fi
}

ensure_munge_running() {
  if ! systemctl is-active --quiet munge; then
    warn "munge is not active. Starting…"
    systemctl enable --now munge || die "Failed to start munge. Ensure /etc/munge/munge.key exists and permissions are correct."
  fi
}

mariadb_ready() {
systemctl is-active --quiet mariadb
}


wait_for_mariadb() {
  log "Ensuring MariaDB is running…"
  systemctl enable --now mariadb
  for i in {1..30}; do
    if mariadb_ready; then
      log "MariaDB is ready."
      return 0
    fi
    sleep 1
  done
  die "MariaDB did not become ready on $DB_HOST:$DB_PORT"
}

setup_db() {
  log "Creating database and user (idempotent)…"
  # Use socket auth as root on host; falls back to TCP if needed.
  mariadb <<SQL
CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;
CREATE USER IF NOT EXISTS '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS';
CREATE USER IF NOT EXISTS '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'%';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'localhost';
FLUSH PRIVILEGES;
SQL
  log "DB and grants ensured."
}

write_slurmdbd_conf() {
  log "Writing $SLURMDBD_CONF (backup kept)…"
  install -o root -g root -m 0755 -d "$SLURM_ETC"
  [[ -f "$SLURMDBD_CONF" ]] && cp -a "$SLURMDBD_CONF" "$SLURMDBD_CONF.bak.$(date +%s)" || true
  cat >"$SLURMDBD_CONF" <<EOF
# Auto-generated by setup_slurm_accounting.sh
AuthType=auth/munge
DbdHost=$SLURMDBD_HOST
DbdPort=$SLURMDBD_PORT
PidFile=/var/run/slurmdbd.pid
SlurmUser=slurm
LogFile=/var/log/slurm/slurmdbd.log
StorageType=accounting_storage/mysql
StorageHost=$DB_HOST
StoragePort=$DB_PORT
StorageUser=$DB_USER
StoragePass=$DB_PASS
StorageLoc=$DB_NAME
# Optional tuning:
# MessageTimeout=60
# DebugLevel=info
EOF
  chown slurm:slurm "$SLURMDBD_CONF"
  chmod 600 "$SLURMDBD_CONF"
}

open_ports() {
  [[ "$OPEN_PORTS" != "1" ]] && return 0
  if command -v ufw >/dev/null 2>&1; then
    ufw allow "$SLURMDBD_PORT"/tcp || true
  fi
}

start_slurmdbd() {
  log "Starting slurmdbd…"
  install -o slurm -g slurm -m 0755 -d /var/log/slurm || true
  systemctl enable --now slurmdbd
  sleep 1
  systemctl --no-pager --full status slurmdbd || true
}

patch_slurm_conf() {
  [[ "$PATCH_SLURM_CONF" != "1" ]] && return 0
  log "Patching $SLURM_CONF to use slurmdbd (backup kept)…"
  [[ -f "$SLURM_CONF" ]] || die "Missing $SLURM_CONF. Create your base slurm.conf first."
  cp -a "$SLURM_CONF" "$SLURM_CONF.bak.$(date +%s)"
  # Ensure required keys exist or are updated.
  # - AccountingStorageType tells slurmctld to talk to slurmdbd
  # - AccountingStorageHost/Port tell slurmctld where the dbd is
  # - JobAcctGatherType recommended for accounting completeness
  grep -q '^AccountingStorageType=' "$SLURM_CONF" \
    && sed -i "s|^AccountingStorageType=.*|AccountingStorageType=accounting_storage/slurmdbd|" "$SLURM_CONF" \
    || echo "AccountingStorageType=accounting_storage/slurmdbd" >> "$SLURM_CONF"

  grep -q '^AccountingStorageHost=' "$SLURM_CONF" \
    && sed -i "s|^AccountingStorageHost=.*|AccountingStorageHost=$SLURMDBD_HOST|" "$SLURM_CONF" \
    || echo "AccountingStorageHost=$SLURMDBD_HOST" >> "$SLURM_CONF"

  grep -q '^AccountingStoragePort=' "$SLURM_CONF" \
    && sed -i "s|^AccountingStoragePort=.*|AccountingStoragePort=$SLURMDBD_PORT|" "$SLURM_CONF" \
    || echo "AccountingStoragePort=$SLURMDBD_PORT" >> "$SLURM_CONF"

  if ! grep -q '^JobAcctGatherType=' "$SLURM_CONF"; then
    echo "JobAcctGatherType=jobacct_gather/linux" >> "$SLURM_CONF"
  fi

  # Optional: enable hierarchical acct (assoc limits) later as needed.
  log "Reloading slurmctld to pick up accounting…"
  systemctl reload slurmctld || systemctl restart slurmctld
}

register_cluster() {
  log "Registering cluster '$CLUSTER_NAME' in accounting (safe if exists)…"
  # -i = assume yes; we ignore errors if already exists
  sacctmgr -i add cluster "$CLUSTER_NAME" || true
  log "Current clusters:"
  sacctmgr show cluster format=cluster,controlhost -Pn || true
}

verify() {
  echo
  log "Verification steps:"
  echo "  1) slurmdbd status:"
  systemctl is-active --quiet slurmdbd && echo "     slurmdbd is ACTIVE" || echo "     slurmdbd is NOT active"
  echo "  2) sacctmgr show cluster:"
  sacctmgr show cluster format=cluster,controlhost -Pn || true
  echo "  3) slurmctld sees accounting (slurmctld log should show dbd handshake)."
  echo
  log "Quick checks:"
  echo "  - sdiag | grep -i acct (if available)"
  echo "  - sacct -S now-1hour --format=JobID,User,Account,Elapsed,State"
  echo
  log "REST note:"
  echo "  If you already run slurmrestd, accounting-backed endpoints like /slurm/v0.0.39/jobs and sacct-like queries will use slurmdbd automatically once configured."
}

# =========================
# Main
# =========================
need_root
ensure_munge_running
pkg_install
wait_for_mariadb
setup_db
write_slurmdbd_conf
open_ports
start_slurmdbd
patch_slurm_conf
register_cluster
verify

log "Done."
